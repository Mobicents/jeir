<?xml version="1.0"?>
<project name="eir.release.sf" default="package" basedir=".">

	<!-- Components Versions -->
	<property name="release.version" value="1.0.0-ALPHA" />

	<property name="eir.version" value="1.0.0.ALPHA-SNAPSHOT" />

	<property name="protocols.build.list" value="parent,m3ua,mtp,isup,sccp,tcap,map" />
	<property name="protocols.copy.list" value="m3ua,mtp,isup,sccp,tcap,map" />

	<!-- Directories Configuration -->
	<property name="checkout.basedir" value="checkout" />
	<property name="zip.dir" value="${basedir}/zip" />
	<property name="zip.file.destination.dir" value="${basedir}/upload" />
	<property name="zip.file.name" value="mobicents-eir-${release.version}" />
	<property name="failoncopy" value="true" />
	<property name="test.skip" value="true" />
	
	<!-- Definition -->
	<property name="release.name" value="ALPHA" />

	<property environment="sys" />
	<condition property="mvn.executable" value="${sys.M2_HOME}\bin\mvn.bat" else="mvn">
		<os family="windows" />
	</condition>

	<taskdef onerror="fail" resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ss7.release.sf}/../ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<target name="init">
		<echo message="Java Version: ${java.version}" />
		<echo message="Java home: ${java.home}" />
		<fail message="Unsupported Java version: ${java.version}. Make sure that the version of the Java compiler is 1.7 (7.0) or greater.">
			<condition>
				<not>
					<or>
						<contains string="${java.version}" substring="1.7" casesensitive="false" />
					</or>
				</not>
			</condition>
		</fail>
	</target>

	<target name="checkout" description="Checks out src and downloads everything that is required." depends="checkout-sources" />

	<target name="build" description="Builds components sources and everything associated." depends="build-sources-eir" />

	<target name="copy" depends="copy-eir" />

	<target name="package" description="Builds binary package." depends="init,clean,checkout,zip.src,build,notes,copy" /> <!-- ,zip.binary-->

	<target name="clean">
		<echo>Cleaning checkout directory</echo>
		<delete dir="${ant.file.eir.release.sf}/../${checkout.basedir}" verbose="false" />
		<echo>Cleaning work directory</echo>
		<delete dir="${zip.dir}" verbose="false" />
		<echo>Cleaning upload directory</echo>
		<delete dir="${zip.file.destination.dir}" verbose="false" />
	</target>

	<target name="checkout-sources">
		<echo>Checking out sources</echo>
		<mkdir dir="${checkout.basedir}" />
		<exec executable="${mvn.executable}" dir="${ant.file.mobicents.release}/../">
			<arg line="validate -P checkout -Dcheckout.dir=${checkout.basedir}" />
		</exec>
	</target>

	<target name="build-sources-eir">
		<echo>Build EIR</echo>
		<exec executable="${mvn.executable}" dir="${checkout.basedir}/eir">
			<arg line="-f pom.xml install -P release -Dmaven.test.skip=${test.skip} -Drelease.name=${release.name} -Dhttp.proxyHost=${http.proxyHost} -Dhttp.proxyPort=${http.proxyPort}" />
		</exec>
	</target>

	<target name="notes">
		<copy todir="${zip.dir}" file="${basedir}/README.TXT" failonerror="${failoncopy}">
			<filterchain>
				<replacetokens>
					<token key="VERSION" value="${release.version}" />
				</replacetokens>
			</filterchain>
		</copy>
	</target>

	<target name="copy-eir">
		<echo>Copy EIR Server</echo>
		<copy todir="${zip.dir}/eir/mobicents-eir-server" failonerror="${failoncopy}">
			<fileset dir="${checkout.basedir}/eir/core//bootstrap/target/mobicents-eir-server">
				<include name="**" />
			</fileset>
		</copy>

		<echo>Copy EIR SLEE part</echo>
		<copy todir="${zip.dir}/eir/slee" failonerror="${failoncopy}">
			<fileset dir="${checkout.basedir}/eir/core/slee/services/du/target/">
				<include name="eir-service-du-${eir.version}.jar" />
			</fileset>
		</copy>

		<echo>Copy Docs</echo>
		<copy todir="${zip.dir}/eir/docs" failonerror="${failoncopy}">
			<fileset dir="${checkout.basedir}/eir/docs/jdocbook-mobicents/target/docbook/publish">
				<include name="**" />
			</fileset>
		</copy>

		<echo>Copy Build File</echo>
		<copy file="${checkout.basedir}/eir/release/release-build.xml" tofile="${zip.dir}/eir/build.xml" failonerror="${failoncopy}" />
	</target>

	<target name="zip.binary">
		<zip destfile="${zip.file.destination.dir}/${zip.file.name}.zip">
			<zipfileset dir="${zip.dir}" excludes="zip">
			</zipfileset>
		</zip>

		<antcall target="checksum">
			<param name="source.file" value="${zip.file.destination.dir}/${zip.file.name}.zip" />
			<param name="algorithm" value="sha1" />
		</antcall>
	</target>
	
	<target name="zip.src">
		<mkdir dir="${zip.file.destination.dir}" />
		<zip destfile="${zip.file.destination.dir}/${zip.file.name}-src.zip">
			<zipfileset dir="${checkout.basedir}" excludes="zip">
			</zipfileset>
		</zip>

		<antcall target="checksum">
			<param name="source.file" value="${zip.file.destination.dir}/${zip.file.name}-src.zip" />
			<param name="algorithm" value="sha1" />
		</antcall>
	</target>
	
	<target name="checksum">
		<checksum file="${source.file}" algorithm="${algorithm}" fileext=".${algorithm}.asc" forceOverwrite="yes" />
	</target>
</project>

